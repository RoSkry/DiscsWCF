//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DiscClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Disc", Namespace="http://schemas.datacontract.org/2004/07/DiscHostService")]
    [System.SerializableAttribute()]
    public partial class Disc : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BandNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Cd_DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FormatNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BandName {
            get {
                return this.BandNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BandNameField, value) != true)) {
                    this.BandNameField = value;
                    this.RaisePropertyChanged("BandName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Cd_Date {
            get {
                return this.Cd_DateField;
            }
            set {
                if ((this.Cd_DateField.Equals(value) != true)) {
                    this.Cd_DateField = value;
                    this.RaisePropertyChanged("Cd_Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FormatName {
            get {
                return this.FormatNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FormatNameField, value) != true)) {
                    this.FormatNameField = value;
                    this.RaisePropertyChanged("FormatName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SellInfo", Namespace="http://schemas.datacontract.org/2004/07/DiscHostService")]
    [System.SerializableAttribute()]
    public partial class SellInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BandDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BandNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CDNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Cd_DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FormatNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SellerNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BandDate {
            get {
                return this.BandDateField;
            }
            set {
                if ((this.BandDateField.Equals(value) != true)) {
                    this.BandDateField = value;
                    this.RaisePropertyChanged("BandDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BandName {
            get {
                return this.BandNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BandNameField, value) != true)) {
                    this.BandNameField = value;
                    this.RaisePropertyChanged("BandName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CDName {
            get {
                return this.CDNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CDNameField, value) != true)) {
                    this.CDNameField = value;
                    this.RaisePropertyChanged("CDName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Cd_Date {
            get {
                return this.Cd_DateField;
            }
            set {
                if ((this.Cd_DateField.Equals(value) != true)) {
                    this.Cd_DateField = value;
                    this.RaisePropertyChanged("Cd_Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FormatName {
            get {
                return this.FormatNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FormatNameField, value) != true)) {
                    this.FormatNameField = value;
                    this.RaisePropertyChanged("FormatName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SellerName {
            get {
                return this.SellerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SellerNameField, value) != true)) {
                    this.SellerNameField = value;
                    this.RaisePropertyChanged("SellerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupInfo", Namespace="http://schemas.datacontract.org/2004/07/DiscHostService")]
    [System.SerializableAttribute()]
    public partial class GroupInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Cd_DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SellingCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Cd_Date {
            get {
                return this.Cd_DateField;
            }
            set {
                if ((this.Cd_DateField.Equals(value) != true)) {
                    this.Cd_DateField = value;
                    this.RaisePropertyChanged("Cd_Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Format {
            get {
                return this.FormatField;
            }
            set {
                if ((object.ReferenceEquals(this.FormatField, value) != true)) {
                    this.FormatField = value;
                    this.RaisePropertyChanged("Format");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SellingCount {
            get {
                return this.SellingCountField;
            }
            set {
                if ((this.SellingCountField.Equals(value) != true)) {
                    this.SellingCountField = value;
                    this.RaisePropertyChanged("SellingCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDiscInfo", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDiscInfo {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscInfo/ShowAllDiscs", ReplyAction="http://tempuri.org/IDiscInfo/ShowAllDiscsResponse")]
        System.Collections.Generic.List<DiscClient.ServiceReference1.Disc> ShowAllDiscs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscInfo/ShowAllDiscs", ReplyAction="http://tempuri.org/IDiscInfo/ShowAllDiscsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DiscClient.ServiceReference1.Disc>> ShowAllDiscsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscInfo/AllSellInfo", ReplyAction="http://tempuri.org/IDiscInfo/AllSellInfoResponse")]
        System.Collections.Generic.List<DiscClient.ServiceReference1.SellInfo> AllSellInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscInfo/AllSellInfo", ReplyAction="http://tempuri.org/IDiscInfo/AllSellInfoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DiscClient.ServiceReference1.SellInfo>> AllSellInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscInfo/TotalAmountSellGroup", ReplyAction="http://tempuri.org/IDiscInfo/TotalAmountSellGroupResponse")]
        System.Collections.Generic.List<DiscClient.ServiceReference1.GroupInfo> TotalAmountSellGroup(string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscInfo/TotalAmountSellGroup", ReplyAction="http://tempuri.org/IDiscInfo/TotalAmountSellGroupResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DiscClient.ServiceReference1.GroupInfo>> TotalAmountSellGroupAsync(string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscInfo/MostPopularGroup", ReplyAction="http://tempuri.org/IDiscInfo/MostPopularGroupResponse")]
        string MostPopularGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscInfo/MostPopularGroup", ReplyAction="http://tempuri.org/IDiscInfo/MostPopularGroupResponse")]
        System.Threading.Tasks.Task<string> MostPopularGroupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscInfo/AddDiscBand", ReplyAction="http://tempuri.org/IDiscInfo/AddDiscBandResponse")]
        [System.ServiceModel.TransactionFlowAttribute(System.ServiceModel.TransactionFlowOption.Mandatory)]
        bool AddDiscBand(DiscClient.ServiceReference1.SellInfo sellInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiscInfo/AddDiscBand", ReplyAction="http://tempuri.org/IDiscInfo/AddDiscBandResponse")]
        System.Threading.Tasks.Task<bool> AddDiscBandAsync(DiscClient.ServiceReference1.SellInfo sellInfo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDiscInfo/AddSell")]
        void AddSell(string discName, string cashier);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDiscInfo/AddSell")]
        System.Threading.Tasks.Task AddSellAsync(string discName, string cashier);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDiscInfoChannel : DiscClient.ServiceReference1.IDiscInfo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiscInfoClient : System.ServiceModel.ClientBase<DiscClient.ServiceReference1.IDiscInfo>, DiscClient.ServiceReference1.IDiscInfo {
        
        public DiscInfoClient() {
        }
        
        public DiscInfoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiscInfoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiscInfoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiscInfoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<DiscClient.ServiceReference1.Disc> ShowAllDiscs() {
            return base.Channel.ShowAllDiscs();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DiscClient.ServiceReference1.Disc>> ShowAllDiscsAsync() {
            return base.Channel.ShowAllDiscsAsync();
        }
        
        public System.Collections.Generic.List<DiscClient.ServiceReference1.SellInfo> AllSellInfo() {
            return base.Channel.AllSellInfo();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DiscClient.ServiceReference1.SellInfo>> AllSellInfoAsync() {
            return base.Channel.AllSellInfoAsync();
        }
        
        public System.Collections.Generic.List<DiscClient.ServiceReference1.GroupInfo> TotalAmountSellGroup(string GroupName) {
            return base.Channel.TotalAmountSellGroup(GroupName);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DiscClient.ServiceReference1.GroupInfo>> TotalAmountSellGroupAsync(string GroupName) {
            return base.Channel.TotalAmountSellGroupAsync(GroupName);
        }
        
        public string MostPopularGroup() {
            return base.Channel.MostPopularGroup();
        }
        
        public System.Threading.Tasks.Task<string> MostPopularGroupAsync() {
            return base.Channel.MostPopularGroupAsync();
        }
        
        public bool AddDiscBand(DiscClient.ServiceReference1.SellInfo sellInfo) {
            return base.Channel.AddDiscBand(sellInfo);
        }
        
        public System.Threading.Tasks.Task<bool> AddDiscBandAsync(DiscClient.ServiceReference1.SellInfo sellInfo) {
            return base.Channel.AddDiscBandAsync(sellInfo);
        }
        
        public void AddSell(string discName, string cashier) {
            base.Channel.AddSell(discName, cashier);
        }
        
        public System.Threading.Tasks.Task AddSellAsync(string discName, string cashier) {
            return base.Channel.AddSellAsync(discName, cashier);
        }
    }
}
